plugins {
    id 'org.spongepowered.plugin' version '0.6'
    id "com.github.johnrengelman.shadow" version "1.2.3"
    id 'net.minecrell.licenser' version '0.3'
    //id 'org.spongepowered.event-impl-gen' version '5.0.2'
}

ext.plugin_version = "0.1.4"
ext.spongeapi_version = "6.0.0"
ext.everplugins = project

version = "S" + ext.spongeapi_version + "-R"  + ext.plugin_version + "-BETA"
if (project.hasProperty("BUILD_NUMBER")) {
	version = version + '-' + project.property("BUILD_NUMBER")
}

allprojects {
	group = 'fr.evercraft'
    version = everplugins.version
    organization = 'EverCraft'
}

// Default tasks
defaultTasks 'licenseFormat', 'build', 'shadowJar'


configure(subprojects.findAll {it.name != "SpongeAPI"}) {
	apply plugin: 'groovy'
    apply plugin: 'java'
	apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven'

    repositories {
		mavenCentral()
		maven {
			name = 'sponge'
			url = 'http://repo.spongepowered.org/maven'
		}
	}
	
	dependencies {
		compile "org.spongepowered:spongeapi:" + spongeapi_version + "-SNAPSHOT"
		//compile project(':SpongeAPI')
	}
	
	jar {
		manifest {
			attributes 'Implementation-Title': name,
					   'Implementation-Version': version
		}
	}
	
	libsDirName = new File(rootProject.projectDir, "build/plugins")
	
	apply plugin: 'net.minecrell.licenser'
	
	processResources {
	    from 'HEADER.txt'
	}
		
	license {
	    header = everplugins.file('HEADER.txt')
	    include '**/*.java'
	    ignoreFailures = true
	    newLine = false // Disables the new line
	    ext {
	        name = project.name
	        organization = project.organization
	        url = project.url
	    }
	}
	
	sponge {
	    plugin {
	        meta {
	        	id = "$project.group.$project.name"
	            name = "$project.name"
	            version = "$project.version"
	        }
	    }
	}
}

task('setupDecompWorkspace', dependsOn: 'genEventImpl')

configure(subprojects.findAll {it.name != "EverAPI" && it.name != "SpongeAPI"}) {
	dependencies {
        compile project(":EverAPI")
    }
}

project(':EverAPI') {	
	dependencies {
		compile "io.netty:netty-all:4.0.23.Final"
	}
	
	def versionFile =  'src/main/java/fr/evercraft/everapi/EverAPI.java'
	def tempDir = 'build/tmp/sourcesCache'
	def versionFileName = 'EverAPI.java'
	
	compileJava.doFirst {
	    copy {
	        from(versionFile)
	        into(tempDir)
	    }
	    ant.replace(file: versionFile, token: '{EVERPLUGINS_VERSION}', value: plugin_version)
	    ant.replace(file: versionFile, token: '{SPONGEAPI_VERSION}', value: spongeapi_version + "-SNAPSHOT")
	}
	
	compileJava.doLast {
	    copy {
	        from(tempDir + '/' + versionFileName)
	        into(project.file(versionFile).parent)
	    }
	}
	
	/*apply plugin: 'org.spongepowered.event-impl-gen'

	genEventImpl {
	    // The full qualified class name of the factory
	    outputFactory = 'fr.evercraft.everapi.event.RexbutEvent'
	    // The path to your event interfaces
	    include 'src/main/java/fr/evercraft/everapi/event/*'
	}*/
}

project(':EverMails') {
	apply plugin: 'com.github.johnrengelman.shadow'

	configurations {
    	shadow
	}

	dependencies {
		compile 'javax.mail:mail:1.4.7'
		shadow 'javax.mail:mail:1.4.7'
	}
	
	shadowJar {
		baseName = project.name
	   	classifier = null
	   	version = project.version
	
		configurations += [project.configurations.shadow]
	  	dependencies {
	    	include(dependency('javax.mail:mail:1.4.7'))
	  	}
	}
}

task zip(type: Zip) {
    from "build/plugins"
	include '*.jar'
	
    archiveName 'All-EverPlugins-' + everplugins.version + ".zip"
	destinationDir file('build/plugins')
}